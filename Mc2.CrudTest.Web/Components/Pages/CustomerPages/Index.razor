@page "/customers"
@inject IDbContextFactory<Mc2.CrudTest.Web.Data.ApplicationDbContext> DbFactory
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Mc2.CrudTest.Web
@using Mc2.CrudTest.Web.Data
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="customers/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredCustomers" Pagination="paginationState">
    <PropertyColumn Property="customer => customer.FirstName" Title="First Name" />
    <PropertyColumn Property="customer => customer.LastName" Title="Last Name">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="LastNameFilter" @bind:event="oninput" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="customer => customer.DateOfBirth" Title="Date of Birth" />
    <PropertyColumn Property="customer => customer.PhoneNumber" Title=" Phone Number" />
    <PropertyColumn Property="customer => customer.Email" Title="Email Address" />
    <PropertyColumn Property="customer => customer.BankAccountNumber" Title="Bank Account Number" />

    <TemplateColumn Context="customer">
        <a href="@($"customers/edit?id={customer.Id}")">Edit</a> |
        <a href="@($"customers/details?id={customer.Id}")">Details</a> |
        <a href="@($"customers/delete?id={customer.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="paginationState" />

@code {
    private ApplicationDbContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    PaginationState paginationState = new() { ItemsPerPage = 10 };
    string LastNameFilter = string.Empty;
    IQueryable<Customer> FilteredCustomers => context.Customer.Where(Customer => Customer.LastName!.Contains(LastNameFilter));
}
